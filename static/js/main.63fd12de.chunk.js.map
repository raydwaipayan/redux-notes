{"version":3,"sources":["components/List.js","components/Form.js","actions/index.js","constants/action-types.js","App.js","serviceWorker.js","reducers/index.js","store/index.js","index.js"],"names":["list","connect","state","articles","_ref","react_default","a","createElement","List_default","map","article","ListItem_default","key","id","alignItems","ListItemText_default","index_es","variant","title","ConnectedForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","value","handleSubmit","preventDefault","uuidv1","props","addArticle","onSubmit","type","onChange","margin","style","marginLeft","spacing","unit","marginRight","Button_default","color","styles","Component","Form","dispatch","payload","withStyles","theme","root","flexGrow","paper","padding","textAlign","palette","text","secondary","classes","className","Grid_default","item","xs","Paper_default","components_List","components_Form","Boolean","window","location","hostname","match","initialState","rootReducer","arguments","length","undefined","action","objectSpread","concat","toConsumableArray","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63fd12de.chunk.js","sourcesContent":["import React from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport { connect } from \"react-redux\";\nimport { Typography } from \"@material-ui/core\";\n\nconst mapStateToProps = state =>{\n    return {articles: state.articles };\n};\n\nconst ConnectecList= ( {articles} ) =>(\n    <List>\n        {articles.map(article => (\n            <ListItem key={article.id} alignItems=\"flex-start\">\n                <ListItemText>\n                    <Typography variant=\"h6\">\n                       {article.title}\n                    </Typography>\n                </ListItemText>\n            </ListItem>\n        ))}\n    </List>\n);\n\nconst list = connect(mapStateToProps)(ConnectecList);\n\nexport default list;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport uuidv1 from \"uuid\";\nimport { addArticle } from \"../actions/index\";\nimport { TextField } from \"@material-ui/core\";\nimport spacing from \"@material-ui/core/styles/spacing\";\nimport Button from '@material-ui/core/Button';\n\nconst mapDispartchToProps = dispatch =>{\n    return {\n        addArticle: article => dispatch(addArticle(article))\n    };\n};\n\nclass ConnectedForm extends Component{\n    constructor()\n    {\n        super();\n        this.state={\n            title:\"\",\n        };\n    }\n    handleChange= event =>{\n        this.setState({[event.target.id]: event.target.value});\n    }\n\n    handleSubmit= event =>{\n        event.preventDefault();\n        const { title } = this.state;\n        const id=uuidv1();\n        this.props.addArticle({title,id});\n        this.setState({title: \"\"});\n    }\n    render(){\n        const { title } = this.state;\n        return(\n            <form onSubmit={this.handleSubmit}>\n                <TextField\n                    id=\"title\"\n                    type=\"text\"\n                    value={title}\n                    onChange={this.handleChange}\n                    margin=\"normal\"\n                    variant=\"filled\"\n                    style={{\n                        marginLeft: spacing.unit,\n                        marginRight: spacing.unit\n                    }}\n                />\n                <Button \n                    variant=\"contained\"\n                    color=\"primary\"\n                    styles={{margin: spacing.unit}}\n                    type=\"submit\"\n                    >\n                    SAVE\n                </Button>\n            </form>\n        );\n    }\n}\n\nconst Form= connect(null, mapDispartchToProps)(ConnectedForm);\n\nexport default Form;","import { ADD_ARTICLE } from \"../constants/action-types\";\n\nexport const addArticle = article => ({\n    type: ADD_ARTICLE,\n    payload: article\n});","export const ADD_ARTICLE = \"ADD_ARTICLE\";\n","import React from 'react';\nimport List from \"./components/List\";\nimport Form from \"./components/Form\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\n\n\nconst styles= theme=>({\n  root:{\n    flexGrow:1,\n  },\n  paper:{\n    padding: theme.spacing.unit * 2,\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n});\n\nconst App=props=>{\n  const {classes}=props;\n  return(\n  <div className={classes.root}>\n    <Grid item xs={6}>\n      <Paper className={classes.paper}>\n        <h2>Articles</h2>\n        <List />\n      </Paper> \n    </Grid>\n    <Grid item xs={6}>\n      <Paper className={classes.paper}>\n        <h2>Add a new article</h2>\n        <Form />\n      </Paper>\n    </Grid>\n  </div>\n  );\n}\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_ARTICLE } from \"../constants/action-types\";\n\nconst initialState={\n    articles:[]\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type){\n        case ADD_ARTICLE:\n            return { ...state, articles: [...state.articles, action.payload] }\n        default:\n            return state;\n    }\n};\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from \"./store/index\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}